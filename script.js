let tenThousandPixelString

const colorMap = {
  "0": "#FFFFFF", // white
  "1": "#00FF00", // green
  "2": "#FFFF00", // yellow
  "3": "#FF0000", // red
  "4": "#FFA500", // orange
  "5": "#800080", // purple
  "6": "#0000FF", // blue
  "7": "#008080", // teal
  "8": "#FFC0CB", // pink
  "9": "#000000", // black
};

window.onload = () => {
  const canvas = document.getElementById("canvas");
  const context = canvas.getContext("2d");
  
  const gridSize = Math.sqrt(tenThousandPixelString.length);
  let pixelSize = 3;
  let offsetX = 0;
  let offsetY = 0;
  let isDragging = false;
  let lastX, lastY;

  const redraw = () => {
    canvas.width = 300;
    canvas.height = 300;
    
    context.clearRect(0, 0, canvas.width, canvas.height);
    
    for (let i = 0; i < tenThousandPixelString.length; i++) {
      const x = ((i % gridSize) * pixelSize) - offsetX;
      const y = (Math.floor(i / gridSize) * pixelSize) - offsetY;
      const color = colorMap[tenThousandPixelString[i]];
      
      context.fillStyle = color;
      context.fillRect(x, y, pixelSize, pixelSize);
    }
  }
  
  const applyOffsetLimits = () => {
    const maxOffset = (gridSize * pixelSize) - canvas.width;
    offsetX = Math.min(maxOffset, Math.max(0, offsetX));
    offsetY = Math.min(maxOffset, Math.max(0, offsetY));
  }

  const zoom = (factor, cursorX, cursorY) => {
    const oldPixelSize = pixelSize;
    pixelSize *= factor;
    pixelSize = Math.max(3, Math.min(30, pixelSize));

    offsetX = (offsetX + cursorX) * (pixelSize / oldPixelSize) - cursorX;
    offsetY = (offsetY + cursorY) * (pixelSize / oldPixelSize) - cursorY;
    
    applyOffsetLimits();

    redraw();
  }

  canvas.addEventListener('wheel', (e) => {
    e.preventDefault();
    const rect = canvas.getBoundingClientRect();
    const cursorX = e.clientX - rect.left;
    const cursorY = e.clientY - rect.top;
    const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1;
    zoom(zoomFactor, cursorX, cursorY);
  });

  canvas.addEventListener('mousedown', (e) => {
    isDragging = true;
    lastX = e.clientX;
    lastY = e.clientY;
  });

  canvas.addEventListener('mousemove', (e) => {
    if (isDragging) {
      const deltaX = e.clientX - lastX;
      const deltaY = e.clientY - lastY;

      offsetX -= deltaX;
      offsetY -= deltaY;
      
      applyOffsetLimits();

      lastX = e.clientX;
      lastY = e.clientY;
      redraw();
    }
  });

  canvas.addEventListener('mouseup', () => {
    isDragging = false;
  });

  canvas.addEventListener('mouseleave', () => {
    isDragging = false;
  });

  redraw();
}